// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastrecture.Migrations
{
    [DbContext(typeof(DBcontexAppt))]
    partial class DBcontexApptModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Rolle", b =>
                {
                    b.Property<int>("IdRolle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRolle"));

                    b.Property<string>("NameRolle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRolle");

                    b.ToTable("rolles");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("JobInTech")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Sexe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Domain.Models.UserRolle", b =>
                {
                    b.Property<int>("IDRolleUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDRolleUser"));

                    b.Property<int>("IdRolle")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("RolleIdRolle")
                        .HasColumnType("int");

                    b.Property<int>("userIdUser")
                        .HasColumnType("int");

                    b.HasKey("IDRolleUser");

                    b.HasIndex("RolleIdRolle");

                    b.HasIndex("userIdUser");

                    b.ToTable("userRolles");
                });

            

            modelBuilder.Entity("Domain.Models.UserRolle", b =>
                {
                    b.HasOne("Domain.Models.Rolle", "Rolle")
                        .WithMany()
                        .HasForeignKey("RolleIdRolle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rolle");

                    b.Navigation("user");
                });

        
#pragma warning restore 612, 618
        }
    }
}
